/*
 * @(#)HttpUtils.jml
 *
 * @version $Id: HttpUtils.jml 775 2006-04-15 13:45:44Z alanm $
 *
 * The interface on which this JML specification is based was extracted from
 * source code with the following license:
 *
 * ==
 *
 * Copyright 2004 The Apache Software Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package javax.servlet.http;

import javax.servlet.ServletInputStream;
import java.util.Hashtable;
import java.util.ResourceBundle;
import java.util.StringTokenizer;
import java.io.IOException;

/**
 * @deprecated      As of Java(tm) Servlet API 2.3.
 *         These methods were only useful
 *         with the default encoding and have been moved
 *         to the request interfaces.
 *
 */
public class HttpUtils
{
   // private static final String LSTRING_FILE = "javax.servlet.http.LocalStrings";
   // private static ResourceBundle lStrings = ResourceBundle.getBundle(LSTRING_FILE);

   /**
    * Constructs an empty <code>HttpUtils</code> object.
    */
   public HttpUtils();

   /**
    * Parses a query string passed from the client to the
    * server and builds a <code>HashTable</code> object
    * with key-value pairs.
    * The query string should be in the form of a string
    * packaged by the GET or POST method, that is, it
    * should have key-value pairs in the form <i>key=value</i>,
    * with each pair separated from the next by a &amp; character.
    *
    * <p>A key can appear more than once in the query string
    * with different values. However, the key appears only once in
    * the hashtable, with its value being
    * an array of strings containing the multiple values sent
    * by the query string.
    *
    * <p>The keys and values in the hashtable are stored in their
    * decoded form, so
    * any + characters are converted to spaces, and characters
    * sent in hexadecimal notation (like <i>%xx</i>) are
    * converted to ASCII characters.
    *
    * @param s      a string containing the query to be parsed
    *
    * @return      a <code>HashTable</code> object built
    *          from the parsed key-value pairs
    *
    * @exception IllegalArgumentException   if the query string
    *                  is invalid
    */
   public static /*@ pure */ Hashtable parseQueryString(/*@ non_null */ String s);

   /**
    * Parses data from an HTML form that the client sends to
    * the server using the HTTP POST method and the
    * <i>application/x-www-form-urlencoded</i> MIME type.
    *
    * <p>The data sent by the POST method contains key-value
    * pairs. A key can appear more than once in the POST data
    * with different values. However, the key appears only once in
    * the hashtable, with its value being
    * an array of strings containing the multiple values sent
    * by the POST method.
    *
    * <p>The keys and values in the hashtable are stored in their
    * decoded form, so
    * any + characters are converted to spaces, and characters
    * sent in hexadecimal notation (like <i>%xx</i>) are
    * converted to ASCII characters.
    *
    * @param len   an integer specifying the length,
    *         in characters, of the
    *         <code>ServletInputStream</code>
    *         object that is also passed to this
    *         method
    *
    * @param in   the <code>ServletInputStream</code>
    *         object that contains the data sent
    *         from the client
    *
    * @return      a <code>HashTable</code> object built
    *         from the parsed key-value pairs
    *
    * @exception IllegalArgumentException   if the data
    *         sent by the POST method is invalid
    */
   /*@
     @ requires len >= 0;
    */
   public static Hashtable parsePostData(int len,
                                      /*@ non_null */ ServletInputStream in);

   /**
    * Reconstructs the URL the client used to make the request,
    * using information in the <code>HttpServletRequest</code> object.
    * The returned URL contains a protocol, server name, port
    * number, and server path, but it does not include query
    * string parameters.
    *
    * <p>Because this method returns a <code>StringBuffer</code>,
    * not a string, you can modify the URL easily, for example,
    * to append query parameters.
    *
    * <p>This method is useful for creating redirect messages
    * and for reporting errors.
    *
    * @param req   a <code>HttpServletRequest</code> object
    *         containing the client's request
    *
    * @return      a <code>StringBuffer</code> object containing
    *         the reconstructed URL
    */
   public static /*@ pure */ StringBuffer getRequestURL(/*@ non_null */ HttpServletRequest req);
}

