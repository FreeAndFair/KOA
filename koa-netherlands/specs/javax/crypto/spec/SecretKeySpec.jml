/*
 * JML specification Copyright 2004 SoS Group, University of Nijmegen
 *
 * @author Joe Kiniry <kiniry@cs.kun.nl>
 * @version $Id$
 */

package javax.crypto.spec;

import java.io.UnsupportedEncodingException;
import java.security.Key;
import java.security.spec.KeySpec;
import javax.crypto.SecretKey;

public /*@ pure @*/ class SecretKeySpec
  implements KeySpec, SecretKey
{
  //@ public non_null model byte[] _key;
  //@ public represents _key <- getEncoded();
  //@ public invariant _key.length > 0;

  //@ public non_null model String _algorithm;
  //@ public represents _algorithm <- getAlgorithm();

  /**
   * Constructs a secret key from the given byte array.
   *
   * <p>This constructor does not check if the given bytes indeed specify a
   * secret key of the specified algorithm. For example, if the algorithm is
   * DES, this constructor does not check if <code>key</code> is 8 bytes
   * long, and also does not check for weak or semi-weak keys.
   * In order for those checks to be performed, an algorithm-specific
   * <i>key specification</i> class (in this case:
   * {@link DESKeySpec DESKeySpec})
   * should be used.
   *
   * @param key the key material of the secret key.
   * @param algorithm the name of the secret-key algorithm to be associated
   * with the given key material.
   * See Appendix A in the <a href="../../../../guide/security/jce/JCERefGuide.html">
   * Java Cryptography Extension Reference Guide</a> 
   * for information about standard algorithm names.
   */
  public SecretKeySpec(byte[] key, String algorithm) {
    if (key == null || algorithm == null) {
      throw new IllegalArgumentException("Missing argument");
    }
    if (key.length == 0) {
      throw new IllegalArgumentException("Empty key");
    }
    this.key = (byte[])key.clone();
    this.algorithm = algorithm;
  }       

  /**
   * Constructs a secret key from the given byte array, using the first
   * <code>len</code> bytes of <code>key</code>, starting at
   * <code>offset</code> inclusive.
   *
   * <p> The bytes that constitute the secret key are
   * those between <code>key[offset]</code> and
   * <code>key[offset+len-1]</code> inclusive.
   *
   * <p>This constructor does not check if the given bytes indeed specify a
   * secret key of the specified algorithm. For example, if the algorithm is
   * DES, this constructor does not check if <code>key</code> is 8 bytes
   * long, and also does not check for weak or semi-weak keys.
   * In order for those checks to be performed, an algorithm-specific key
   * specification class (in this case:
   * {@link DESKeySpec DESKeySpec})
   * must be used.
   *
   * @param key the key material of the secret key.
   * @param offset the offset in <code>key</code> where the key material
   * starts.
   * @param len the length of the key material.
   * @param algorithm the name of the secret-key algorithm to be associated
   * with the given key material.
   * See Appendix A in the <a href="../../../../guide/security/jce/JCERefGuide.html">
   * Java Cryptography Extension Reference Guide</a> 
   * for information about standard algorithm names.
   */    
  public SecretKeySpec(byte[] key, int offset, int len, String algorithm) {
    if (key == null || algorithm == null) {
      throw new IllegalArgumentException("Missing argument");
    }
    if (key.length == 0) {
      throw new IllegalArgumentException("Empty key");
    }
    if (key.length-offset < len) {
      throw new IllegalArgumentException
        ("Invalid offset/length combination");
    }
    this.key = new byte[len];
    System.arraycopy(key, offset, this.key, 0, len);
    this.algorithm = algorithm;
  }

  /*@ also
    @ public normal_behavior
    @  ensures \result.equals(_algorithm);
    @*/
  public String getAlgorithm() {
    return this.algorithm;
  }
    
  /*@ also
    @ public normal_behavior
    @  ensures \result.equals("RAW");
    @*/
  public String getFormat() {
    return "RAW";
  }

  /*@ also
    @ public normal_behavior
    @   ensures \result != null;
    @   ensures (\forall int i; 0 <= i && i < _key.length; _key[i] == \result[i]);
    @*/
  public byte[] getEncoded();

  public int hashCode();

  public boolean equals(Object obj);
}
