// This file was generated by jmlunit on Mon Apr 05 13:24:46 CEST 2004.

package sos.koa;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import java.util.TreeMap;
import javax.xml.transform.Source;
import javax.xml.transform.sax.SAXSource;

/**
 * Supply test data for the JML and JUnit based testing of 
 * CandidateList.
 *
 * <p>Test data is supplied by overriding methods in this class.  See
 * the JML documentation and the comments below about how to do this.
 *
 * <p>This class is also the place to override the <kbd>setUp()</kbd>
 * and <kbd>tearDown()</kbd> methods if your testing needs some
 * actions to be taken before and after each test is executed.
 *
 * <p>This class is never rewritten by jmlunit.
 *
 * @author Joe Kiniry <kiniry@cs.kun.nl>
 */
public abstract class CandidateList_JML_TestData
  extends junit.framework.TestCase
{
  /** Initialize this class. */
  public CandidateList_JML_TestData(java.lang.String name) {
    super(name);
  }

  /**
   * Return the overall test suite for accumulating tests; the
   * result will hold every test that will be run.  This factory
   * method can be altered to provide filtering of test suites, as
   * they are added to this overall test suite, based on various
   * criteria.  The test driver will first call the method
   * addTestSuite to add a test suite formed from custom programmed
   * test methods (named testX for some X), which you can add to
   * this class; this initial test suite will also include a method
   * to check that the code being tested was compiled with jmlc.
   * After that, for each method to be tested, a test suite
   * containing tests for that method will be added to this overall
   * test suite, using the addTest method.  Test suites added for a
   * method will have some subtype of TestSuite and that method's
   * name as their name. So, if you want to control the overall
   * suite of tests for testing some method, e.g., to limit the
   * number of tests for each method, return a special-purpose
   * subclass of {@link junit.framework.TestSuite} in which you
   * override the addTest method.
   * @see junit.framework.TestSuite
   */
  //@ assignable objectState;
  //@ ensures \result != null;
  public junit.framework.TestSuite overallTestSuite() {
    return new junit.framework.TestSuite("Overall tests for CandidateList");
  }

  /**
   * Return an empty test suite for accumulating tests for the named
   * method.  This factory method can be altered to provide
   * filtering or limiting of the tests for the named method, as
   * they are added to the test suite for this method.  The driver
   * will add individual tests using the addTest method.  So, if you
   * want to filter individual tests, return a subclass of TestSuite
   * in which you override the addTest method.
   * @param methodName The method the tests in this suite are for.
   * @see junit.framework.TestSuite
   * @see org.jmlspecs.jmlunit.strategies.LimitedTestSuite
   */
  //@ assignable objectState;
  //@ ensures \result != null;
  public junit.framework.TestSuite emptyTestSuiteFor
    (java.lang.String methodName)
  {
    return new junit.framework.TestSuite(methodName);
  }

  // You should edit the following code to supply test data.  In the
  // skeleton originally supplied below the jmlunit tool made a
  // guess as to a minimal strategy for generating test data for
  // each type of object used as a receiver, and each type used as
  // an argument.  There is a library of strategies for generating
  // test data in org.jmlspecs.jmlunit.strategies, which are used in
  // the tool's guesses.  See the documentation for JML and in
  // particular for the org.jmlspecs.jmlunit.strategies package for
  // a general discussion of how to do this.  (This package's
  // documentation is available through the JML.html file in the top
  // of the JML release, and also in the package.html file that
  // ships with the package.)
  //
  // You can change the strategies guessed by the jmlunit tool, and
  // you can also define new ones to suit your needs.  You can also
  // delete any useless sample test data that has been generated for
  // you to show you the pattern of how to add your own test data.
  // The only requirement is that you implement the methods below.
  //
  // If you change the type being tested in a way that introduces
  // new types of arguments for some methods, then you will have to
  // introduce (by hand) definitions that are similar to the ones
  // below, because jmlunit never rewrites this file.

  /**
   * Return a new, freshly allocated indefinite iterator that
   * produces test data of type sos.koa.CandidateList for testing
   * the method named by the String methodName in a loop that
   * encloses loopsThisSurrounds many other loops.
   * @param methodName name of the method for which this test data
   * will be used.
   * @param loopsThisSurrounds number of loops that the test
   * contains inside this one.
   */
  //@ requires methodName != null && loopsThisSurrounds >= 0;
  //@ ensures \fresh(\result);
  protected org.jmlspecs.jmlunit.strategies.IndefiniteIterator
    vsos_koa_CandidateListIter
    (java.lang.String methodName, int loopsThisSurrounds)
  {
    return vsos_koa_CandidateListStrategy.iterator();
  }

  /**
   * The strategy for generating test data of type
   * sos.koa.CandidateList.
   */
  private org.jmlspecs.jmlunit.strategies.StrategyType
    vsos_koa_CandidateListStrategy
    = new org.jmlspecs.jmlunit.strategies.NewObjectAbstractStrategy()
      {
        protected Object make(int n) {
          switch (n) {
          case 0:
            return Global_TestData.getCandidateList();
          }
          throw new java.util.NoSuchElementException();
        }
      };

  /**
   * Return a new, freshly allocated indefinite iterator that
   * produces test data of type byte for testing the method named by
   * the String methodName in a loop that encloses
   * loopsThisSurrounds many other loops.
   * @param methodName name of the method for which this test data
   * will be used.
   * @param loopsThisSurrounds number of loops that the test
   * contains inside this one.
   */
  //@ requires methodName != null && loopsThisSurrounds >= 0;
  //@ ensures \fresh(\result);
  protected org.jmlspecs.jmlunit.strategies.ByteIterator
    vbyteIter
    (java.lang.String methodName, int loopsThisSurrounds)
  {
    return vbyteStrategy.byteIterator();
  }

  /**
   * The strategy for generating test data of type byte.
   */
  private org.jmlspecs.jmlunit.strategies.ByteStrategyType
    vbyteStrategy
    = new org.jmlspecs.jmlunit.strategies.ByteBigStrategy()
      {
        protected byte[] addData() {
          return new byte[] { KiesLijst.BLANCO };
        }
      };

  /**
   * Return a new, freshly allocated indefinite iterator that
   * produces test data of type java.lang.String for testing the
   * method named by the String methodName in a loop that encloses
   * loopsThisSurrounds many other loops.
   * @param methodName name of the method for which this test data
   * will be used.
   * @param loopsThisSurrounds number of loops that the test
   * contains inside this one.
   */
  //@ requires methodName != null && loopsThisSurrounds >= 0;
  //@ ensures \fresh(\result);
  protected org.jmlspecs.jmlunit.strategies.IndefiniteIterator
    vjava_lang_StringIter
    (java.lang.String methodName, int loopsThisSurrounds)
  {
    return vjava_lang_StringStrategy.iterator();
  }

  /**
   * The strategy for generating test data of type java.lang.String.
   */
  private org.jmlspecs.jmlunit.strategies.StrategyType
    vjava_lang_StringStrategy
    = new org.jmlspecs.jmlunit.strategies.StringStrategy()
      {
        protected java.lang.Object[] addData() {
          return new java.lang.String[] {
            Global_TestData.getString()
          };
        }
      };

  /**
   * Return a new, freshly allocated indefinite iterator that
   * produces test data of type int for testing the method named by
   * the String methodName in a loop that encloses
   * loopsThisSurrounds many other loops.
   * @param methodName name of the method for which this test data
   * will be used.
   * @param loopsThisSurrounds number of loops that the test
   * contains inside this one.
   */
  //@ requires methodName != null && loopsThisSurrounds >= 0;
  //@ ensures \fresh(\result);
  protected org.jmlspecs.jmlunit.strategies.IntIterator
    vintIter
    (java.lang.String methodName, int loopsThisSurrounds)
  {
    return vintStrategy.intIterator();
  }

  /**
   * The strategy for generating test data of type int.
   */
  private org.jmlspecs.jmlunit.strategies.IntStrategyType
    vintStrategy
    = new org.jmlspecs.jmlunit.strategies.IntBigStrategy()
      {
        protected int[] addData() {
          return new int[] {
            Global_TestData.getInt()
          };
        }
      };

  /**
   * Return a new, freshly allocated indefinite iterator that produces
   * test data of type sos.koa.KiesLijst for testing the method named
   * by the String methodName in a loop that encloses
   * loopsThisSurrounds many other loops.
   * @param methodName name of the method for which this test data
   * will be used.
   * @param loopsThisSurrounds number of loops that the test contains
   * inside this one.
   */
  //@ requires methodName != null && loopsThisSurrounds >= 0;
  //@ ensures \fresh(\result);
  protected org.jmlspecs.jmlunit.strategies.IndefiniteIterator
    vsos_koa_KiesLijstIter
    (java.lang.String methodName, int loopsThisSurrounds)
  {
    return vsos_koa_KiesLijstStrategy.iterator();
  }

  /**
   * The strategy for generating test data of type sos.koa.KiesLijst.
   */
  private org.jmlspecs.jmlunit.strategies.StrategyType
    vsos_koa_KiesLijstStrategy
    = new org.jmlspecs.jmlunit.strategies.NewObjectAbstractStrategy()
      {
        protected Object make(int n) {
          switch (n) {
            case 0:
              return Global_TestData.getKiesLijst();
          }
          throw new java.util.NoSuchElementException();          
        }
      };

  /**
   * Return a new, freshly allocated indefinite iterator that produces
   * test data of type sos.koa.KiesKring for testing the method named
   * by the String methodName in a loop that encloses
   * loopsThisSurrounds many other loops.
   * @param methodName name of the method for which this test data
   * will be used.
   * @param loopsThisSurrounds number of loops that the test contains
   * inside this one.
   */
  //@ requires methodName != null && loopsThisSurrounds >= 0;
  //@ ensures \fresh(\result);
  protected org.jmlspecs.jmlunit.strategies.IndefiniteIterator
    vsos_koa_KiesKringIter
    (java.lang.String methodName, int loopsThisSurrounds)
  {
    return vsos_koa_KiesKringStrategy.iterator();
  }

  /**
   * The strategy for generating test data of type sos.koa.KiesKring.
   */
  private org.jmlspecs.jmlunit.strategies.StrategyType
    vsos_koa_KiesKringStrategy
    = new org.jmlspecs.jmlunit.strategies.NewObjectAbstractStrategy()
      {
        protected Object make(int n) {
          switch (n) {
            case 0:
              return Global_TestData.getKiesKring();
          }
          throw new java.util.NoSuchElementException();          
        }
      };

  /**
   * Return a new, freshly allocated indefinite iterator that produces
   * test data of type sos.koa.Candidate for testing the method named
   * by the String methodName in a loop that encloses
   * loopsThisSurrounds many other loops.
   * @param methodName name of the method for which this test data
   * will be used.
   * @param loopsThisSurrounds number of loops that the test contains
   * inside this one.
   */
  //@ requires methodName != null && loopsThisSurrounds >= 0;
  //@ ensures \fresh(\result);
  protected org.jmlspecs.jmlunit.strategies.IndefiniteIterator
    vsos_koa_CandidateIter
    (java.lang.String methodName, int loopsThisSurrounds)
  {
    return vsos_koa_CandidateStrategy.iterator();
  }

  /**
   * The strategy for generating test data of type sos.koa.Candidate.
   */
  private org.jmlspecs.jmlunit.strategies.StrategyType
    vsos_koa_CandidateStrategy
    = new org.jmlspecs.jmlunit.strategies.NewObjectAbstractStrategy()
      {
        protected Object make(int n) {
          switch (n) {
          case 0:
            return Global_TestData.getCandidate();
          }
          throw new java.util.NoSuchElementException();          
        }
      };
}
