/*
 * @(#)KeyStore.jml
 *
 * JML specification Copyright 2004 SoS Group, University of Nijmegen
 *
 * @version $Id$
 *
 * @author Martijn Oostdijk (martijno@cs.kun.nl)
 */

package java.security;

import java.io.*;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.util.*;

public class KeyStore
{
   /*@ public behavior
     @    requires keyStoreSpi != null;
     @    requires provider != null;
     @    requires type != null;
     @    ensures getProvider().equals(provider);
     @    ensures getType().equals(type);
    */
   protected KeyStore(KeyStoreSpi keyStoreSpi, Provider provider,
                      String type);

   /*@ public behavior
     @    requires type != null;
     @    ensures \result != null;
     @    ensures \result.getType().equals(type);
     @    signals(KeyStoreException) true;
    */
   public static KeyStore getInstance(String type) throws KeyStoreException;

   /*@ public behavior
     @    requires type != null;
     @    requires provider != null;
     @    ensures \result != null;
     @    ensures \result.getType().equals(type);
     @    signals(KeyStoreException) true;
     @    signals(NoSuchProviderException) true;
    */
   public static KeyStore getInstance(String type, String provider)
   throws KeyStoreException, NoSuchProviderException;

   /*@ public behavior
     @    requires type != null;
     @    requires provider != null;
     @    ensures \result != null;
     @    ensures \result.getType().equals(type);
     @    ensures \result.getProvider().equals(provider);
     @    signals(KeyStoreException) true;
    */
   public static KeyStore getInstance(String type, Provider provider)
   throws KeyStoreException;

   public final /*@ pure non_null */ Provider getProvider();

   public final /*@ pure non_null */ String getType();

   /*@ public behavior
     @    requires alias != null;
     @    requires password != null;
     @    ensures \result != null;
     @    signals(KeyStoreException) true;
     @    signals(NoSuchAlgorithmException) true;
     @    signals(UnrecoverableKeyException) true;
    */
   public final Key getKey(String alias, char[] password)
   throws KeyStoreException, NoSuchAlgorithmException,
          UnrecoverableKeyException;

   /*@ public behavior
     @    requires alias != null;
     @    ensures \result != null;
     @    signals(KeyStoreException) true;
    */
   public final Certificate[] getCertificateChain(String alias)
   throws KeyStoreException;

   /*@ public behavior
     @    requires alias != null;
     @    ensures \result != null;
     @    signals(KeyStoreException) true;
    */
   public final Certificate getCertificate(String alias)
   throws KeyStoreException;

   /*@ public behavior
     @    requires alias != null;
     @    ensures \result != null;
     @    signals(KeyStoreException) true;
    */
   public final Date getCreationDate(String alias)
   throws KeyStoreException;

   /*@ public behavior
     @    requires alias != null;
     @    requires key != null;
     @    requires password != null;
     @    requires chain != null;
     @    signals(KeyStoreException) true;
    */
   public final void setKeyEntry(String alias, Key key, char[] password,
                                 Certificate[] chain)
   throws KeyStoreException;

   /*@ public behavior
     @    requires alias != null;
     @    requires key != null;
     @    requires chain != null;
     @    signals(KeyStoreException) true;
    */
   public final void setKeyEntry(String alias, byte[] key,
                                 Certificate[] chain)
   throws KeyStoreException;

   /*@ public behavior
     @    requires alias != null;
     @    requires cert != null;
     @    signals(KeyStoreException) true;
    */
   public final void setCertificateEntry(String alias, Certificate cert)
   throws KeyStoreException;

   /*@ public behavior
     @    requires alias != null;
     @    signals(KeyStoreException) true;
    */
   public final void deleteEntry(String alias)
   throws KeyStoreException;

   /*@ public behavior
     @    ensures \result != null;
     @    signals(KeyStoreException) true;
    */
   public final Enumeration aliases()
   throws KeyStoreException;

   /*@ public behavior
     @    requires alias != null;
     @    signals(KeyStoreException) true;
    */
   public final boolean containsAlias(String alias)
   throws KeyStoreException;

   /*@ public behavior
     @    ensures \result >= 0;
     @    signals(KeyStoreException) true;
    */
   public final int size()
   throws KeyStoreException;

   /*@ public behavior
     @    requires alias != null;
     @    signals(KeyStoreException) true;
    */
   public final boolean isKeyEntry(String alias)
   throws KeyStoreException;

   /*@ public behavior
     @    requires alias != null;
     @    signals(KeyStoreException) true;
    */
   public final boolean isCertificateEntry(String alias)
   throws KeyStoreException;

   /*@ public behavior
     @    requires cert != null;
     @    signals(KeyStoreException) true;
    */
   public final String getCertificateAlias(Certificate cert)
   throws KeyStoreException;

   /*@ public behavior
     @    requires stream != null;
     @    requires password != null;
     @    signals(KeyStoreException) true;
     @    signals(IOException) true;
     @    signals(NoSuchAlgorithmException) true;
     @    signals(CertificateException) true;
    */
   public final void store(OutputStream stream, char[] password)
   throws KeyStoreException, IOException, NoSuchAlgorithmException,
          CertificateException;

   /*@ public behavior
     @    requires stream != null;
     @    requires password != null;
     @    signals(IOException) true;
     @    signals(NoSuchAlgorithmException) true;
     @    signals(CertificateException) true;
    */
   public final void load(InputStream stream, char[] password)
   throws IOException, NoSuchAlgorithmException, CertificateException;

   public final static /*@ pure non_null */ String getDefaultType();
}

