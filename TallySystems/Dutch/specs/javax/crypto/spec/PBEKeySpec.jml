/*
 * JML specification Copyright 2004 SoS Group, University of Nijmegen
 *
 * @author Joe Kiniry <kiniry@cs.kun.nl>
 * @version $Id$
 */

package javax.crypto.spec;

import java.security.spec.KeySpec;

public class PBEKeySpec implements KeySpec
{
//     private char[] password;
//     private byte[] salt = null;
//     private int iterationCount = 0;
//     private int keyLength = 0;

    /**
     * Constructor that takes a password. An empty char[] is used if
     * null is specified.
     *
     * <p> Note: <code>password</code> is cloned before it is stored in
     * the new <code>PBEKeySpec</code> object.
     *
     * @param password the password.
     */
    public PBEKeySpec(char[] password) {
	if ((password == null) || (password.length == 0)) {
	    this.password = new char[0];
	} else {
	    this.password = (char[])password.clone();
	}
    }

    
    /**
     * Constructor that takes a password, salt, iteration count, and
     * to-be-derived key length for generating PBEKey of variable-key-size
     * PBE ciphers.  An empty char[] is used if null is specified for 
     * <code>password</code>.
     *
     * <p> Note: the <code>password</code> and <code>salt</code> 
     * are cloned before they are stored in
     * the new <code>PBEKeySpec</code> object.
     *
     * @param password the password.
     * @param salt the salt.
     * @param iterationCount the iteration count.
     * @param keyLength the to-be-derived key length.
     * @exception NullPointerException if <code>salt</code> is null.
     * @exception IllegalArgumentException if <code>salt</code> is empty,
     * i.e. 0-length, <code>iterationCount</code> or
     * <code>keyLength</code> is not positive.
     */
    public PBEKeySpec(char[] password, byte[] salt, int iterationCount, 
	int keyLength) {
        if ((password == null) || (password.length == 0)) {
            this.password = new char[0];
        } else {
            this.password = (char[])password.clone();
        }
	if (salt == null) {
	    throw new NullPointerException("the salt parameter " +
					    "must be non-null");
	} else if (salt.length == 0) {
	    throw new IllegalArgumentException("the salt parameter " + 
						"must not be empty");
	} else {
	    this.salt = (byte[]) salt.clone();		
	}
	if (iterationCount<=0) {
	    throw new IllegalArgumentException("invalid iterationCount value");
	}
	if (keyLength<=0) {
	    throw new IllegalArgumentException("invalid keyLength value");
	}	
	this.iterationCount = iterationCount;
	this.keyLength = keyLength;
    }
                      

    /**
     * Constructor that takes a password, salt, iteration count for
     * generating PBEKey of fixed-key-size PBE ciphers. An empty 
     * char[] is used if null is specified for <code>password</code>.
     *
     * <p> Note: the <code>password</code> and <code>salt</code>
     * are cloned before they are stored in the new 
     * <code>PBEKeySpec</code> object.
     *
     * @param password the password.
     * @param salt the salt.
     * @param iterationCount the iteration count.
     * @exception NullPointerException if <code>salt</code> is null.
     * @exception IllegalArgumentException if <code>salt</code> is empty,
     * i.e. 0-length, or <code>iterationCount</code> is not positive.
     */
    public PBEKeySpec(char[] password, byte[] salt, int iterationCount) {
        if ((password == null) || (password.length == 0)) {
            this.password = new char[0];
        } else {
            this.password = (char[])password.clone();
        }
	if (salt == null) {
	    throw new NullPointerException("the salt parameter " +
					    "must be non-null");
	} else if (salt.length == 0) {
	    throw new IllegalArgumentException("the salt parameter " + 
						"must not be empty");
	} else {
	    this.salt = (byte[]) salt.clone();		
	}
	if (iterationCount<=0) {
	    throw new IllegalArgumentException("invalid iterationCount value");
	}
	this.iterationCount = iterationCount;
    }              
                                                   
    /**
     * Clears the internal copy of the password.
     *
     */
    public final void clearPassword() {
	if (password != null) {
            for (int i = 0; i < password.length; i++) {
                password[i] = ' ';
	    }
	    password = null;
        }
    }

    /**
     * Returns a copy of the password.
     *
     * <p> Note: this method returns a copy of the password. It is
     * the caller's responsibility to zero out the password information after
     * it is no longer needed.
     *
     * @exception IllegalStateException if password has been cleared by 
     * calling <code>clearPassword</code> method.
     * @return the password.
     */
    public final char[] getPassword() {
	if (password == null) {
	    throw new IllegalStateException("password has been cleared");
	}
	return (char[]) password.clone();
    } 

    /**
     * Returns a copy of the salt or null if not specified.
     *
     * <p> Note: this method should return a copy of the salt. It is
     * the caller's responsibility to zero out the salt information after
     * it is no longer needed.
     *
     * @return the salt.
     */       
    public final byte[] getSalt() {
	if (salt != null) {
	    return (byte[]) salt.clone();
	} else {
	    return null;
	}
    }

    /**
     * Returns the iteration count or 0 if not specified.
     *
     * @return the iteration count.
     */        
    public final int getIterationCount() {
	return iterationCount;
    }

    /**
     * Returns the to-be-derived key length or 0 if not specified.
     *
     * <p> Note: this is used to indicate the preference on key length
     * for variable-key-size ciphers. The actual key size depends on
     * each provider's implementation.
     *
     * @return the to-be-derived key length.
     */        
    public final int getKeyLength() {
	return keyLength;
    }
}
