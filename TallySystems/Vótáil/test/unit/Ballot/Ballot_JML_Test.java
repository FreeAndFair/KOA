// This file was generated by jmlunit on Thu Apr 26 13:56:55 IST 2007.

package ie.ucd.srg.Ballot;

import election.tally.Ballot;

/** Automatically-generated test driver for JML and JUnit based
 * testing of Ballot. The superclass of this class should be edited
 * to supply test data. However it's best not to edit this class
 * directly; instead use the command
 * <pre>
 *  jmlunit Ballot.java
 * </pre>
 * to regenerate this class whenever Ballot.java changes.
 */
public class Ballot_JML_Test
     extends Ballot_JML_TestData
{
    /** Initialize this class. */
    public Ballot_JML_Test(java.lang.String name) {
        super(name);
    }

    /** Run the tests. */
    public static void main(java.lang.String[] args) {
        org.jmlspecs.jmlunit.JMLTestRunner.run(suite());
        // You can also use a JUnit test runner such as:
        // junit.textui.TestRunner.run(suite());
    }

    /** Test to see if the code for class Ballot
     * has been compiled with runtime assertion checking (i.e., by jmlc).
     * Code that is not compiled with jmlc would not make an effective test,
     * since no assertion checking would be done. */
    public void test$IsRACCompiled() {
        junit.framework.Assert.assertTrue("code for class Ballot"
                + " was not compiled with jmlc"
                + " so no assertions will be checked!",
            org.jmlspecs.jmlrac.runtime.JMLChecker.isRACCompiled(Ballot.class)
            );
    }

    /** Return the test suite for this test class.  This will have
    * added to it at least test$IsRACCompiled(), and any test methods
    * written explicitly by the user in the superclass.  It will also
    * have added test suites for each testing each method and
    * constructor.
    */
    //@ ensures \result != null;
    public static junit.framework.Test suite() {
        Ballot_JML_Test testobj
            = new Ballot_JML_Test("Ballot_JML_Test");
        junit.framework.TestSuite testsuite = testobj.overallTestSuite();
        // Add instances of Test found by the reflection mechanism.
        testsuite.addTestSuite(Ballot_JML_Test.class);
        testobj.addTestSuiteForEachMethod(testsuite);
        return testsuite;
    }

    /** A JUnit test object that can run a single test method.  This
     * is defined as a nested class solely for convenience; it can't
     * be defined once and for all because it must subclass its
     * enclosing class.
     */
    protected static abstract class OneTest extends Ballot_JML_Test {

        /** Initialize this test object. */
        public OneTest(String name) {
            super(name);
        }

        /** The result object that holds information about testing. */
        protected junit.framework.TestResult result;

        //@ also
        //@ requires result != null;
        public void run(junit.framework.TestResult result) {
            this.result = result;
            super.run(result);
        }

        /* Run a single test and decide whether the test was
         * successful, meaningless, or a failure.  This is the
         * Template Method pattern abstraction of the inner loop in a
         * JML/JUnit test. */
        public void runTest() throws java.lang.Throwable {
            try {
                // The call being tested!
                doCall();
            }
            catch (org.jmlspecs.jmlrac.runtime.JMLEntryPreconditionError e) {
                // meaningless test input
                addMeaningless();
            } catch (org.jmlspecs.jmlrac.runtime.JMLAssertionError e) {
                // test failure
                int l = org.jmlspecs.jmlrac.runtime.JMLChecker.getLevel();
                org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel
                    (org.jmlspecs.jmlrac.runtime.JMLOption.NONE);
                try {
                    java.lang.String failmsg = this.failMessage(e);
                    junit.framework.AssertionFailedError err
                        = new junit.framework.AssertionFailedError(failmsg);
                    err.setStackTrace(new java.lang.StackTraceElement[]{});
                    err.initCause(e);
                    result.addFailure(this, err);
                } finally {
                    org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel(l);
                }
            } catch (java.lang.Throwable e) {
                // test success
            }
        }

        /** Call the method to be tested with the appropriate arguments. */
        protected abstract void doCall() throws java.lang.Throwable;

        /** Format the error message for a test failure, based on the
         * method's arguments. */
        protected abstract java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e);

        /** Inform listeners that a meaningless test was run. */
        private void addMeaningless() {
            if (result instanceof org.jmlspecs.jmlunit.JMLTestResult) {
                ((org.jmlspecs.jmlunit.JMLTestResult)result)
                    .addMeaningless(this);
            }
        }
    }

    /** Create the tests that are to be run for testing the class
     * Ballot.  The framework will then run them.
     * @param overallTestSuite$ The suite accumulating all of the tests
     * for this driver class.
     */
    //@ requires overallTestSuite$ != null;
    public void addTestSuiteForEachMethod
        (junit.framework.TestSuite overallTestSuite$)
    {
        try {
            this.addTestSuiteFor$TestBallot(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestCopy(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetPreferenceAtCount(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetCountAtLastTransfer(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetFirstPreference(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestLoad(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetCandidateID(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetNextPreference(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestTransfer(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetBallotID(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestIsAssignedTo(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestRemainingPreferences(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestIsAfter(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
    }

    /** Add tests for the Ballot contructor
     * to the overall test suite. */
    private void addTestSuiteFor$TestBallot
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("Ballot");
        try {
            methodTests$.addTest
                (new TestBallot());
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the Ballot contructor. */
    protected static class TestBallot extends OneTest {

        /** Initialize this instance. */
        public TestBallot() {
            super("Ballot");
        }

        protected void doCall() throws java.lang.Throwable {
            new Ballot();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tContructor 'Ballot'";
            return msg;
        }
    }

    /** Add tests for the copy method
     * to the overall test suite. */
    private void addTestSuiteFor$TestCopy
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("copy");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vie_koa_BallotIter("copy", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vie_koa_BallotIter(\"copy\", 0))");
            while (!receivers$iter.atEnd()) {
                final ie.ucd.srg.Ballot receiver$
                    = (ie.ucd.srg.Ballot) receivers$iter.get();
                methodTests$.addTest
                    (new TestCopy(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the copy method. */
    protected static class TestCopy extends OneTest {
        /** The receiver */
        private ie.ucd.srg.Ballot receiver$;

        /** Initialize this instance. */
        public TestCopy(ie.ucd.srg.Ballot receiver$) {
            super("copy");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.copy();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'copy' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getPreferenceAtCount method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetPreferenceAtCount
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getPreferenceAtCount");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vie_koa_BallotIter("getPreferenceAtCount", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vie_koa_BallotIter(\"getPreferenceAtCount\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("getPreferenceAtCount", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"getPreferenceAtCount\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final ie.ucd.srg.Ballot receiver$
                        = (ie.ucd.srg.Ballot) receivers$iter.get();
                    final int countNumber
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestGetPreferenceAtCount(receiver$, countNumber));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getPreferenceAtCount method. */
    protected static class TestGetPreferenceAtCount extends OneTest {
        /** The receiver */
        private ie.ucd.srg.Ballot receiver$;
        /** Argument countNumber */
        private int countNumber;

        /** Initialize this instance. */
        public TestGetPreferenceAtCount(ie.ucd.srg.Ballot receiver$, int countNumber) {
            super("getPreferenceAtCount"+ ":" + countNumber);
            this.receiver$ = receiver$;
            this.countNumber = countNumber;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getPreferenceAtCount(countNumber);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getPreferenceAtCount' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument countNumber: " + this.countNumber;
            return msg;
        }
    }

    /** Add tests for the getCountAtLastTransfer method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetCountAtLastTransfer
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getCountAtLastTransfer");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vie_koa_BallotIter("getCountAtLastTransfer", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vie_koa_BallotIter(\"getCountAtLastTransfer\", 0))");
            while (!receivers$iter.atEnd()) {
                final ie.ucd.srg.Ballot receiver$
                    = (ie.ucd.srg.Ballot) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetCountAtLastTransfer(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getCountAtLastTransfer method. */
    protected static class TestGetCountAtLastTransfer extends OneTest {
        /** The receiver */
        private ie.ucd.srg.Ballot receiver$;

        /** Initialize this instance. */
        public TestGetCountAtLastTransfer(ie.ucd.srg.Ballot receiver$) {
            super("getCountAtLastTransfer");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getCountAtLastTransfer();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getCountAtLastTransfer' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getFirstPreference method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetFirstPreference
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getFirstPreference");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vie_koa_BallotIter("getFirstPreference", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vie_koa_BallotIter(\"getFirstPreference\", 0))");
            while (!receivers$iter.atEnd()) {
                final ie.ucd.srg.Ballot receiver$
                    = (ie.ucd.srg.Ballot) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetFirstPreference(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getFirstPreference method. */
    protected static class TestGetFirstPreference extends OneTest {
        /** The receiver */
        private ie.ucd.srg.Ballot receiver$;

        /** Initialize this instance. */
        public TestGetFirstPreference(ie.ucd.srg.Ballot receiver$) {
            super("getFirstPreference");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getFirstPreference();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getFirstPreference' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the load method
     * to the overall test suite. */
    private void addTestSuiteFor$TestLoad
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("load");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vie_koa_BallotIter("load", 3));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vie_koa_BallotIter(\"load\", 3))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vlong$_$1$iter
                    = this.vlong$_Iter("load", 2);
                this.check_has_data
                    (vlong$_$1$iter,
                     "this.vlong$_Iter(\"load\", 2)");
                while (!vlong$_$1$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.IntIterator
                        vint$2$iter
                        = this.vintIter("load", 1);
                    this.check_has_data
                        (vint$2$iter,
                         "this.vintIter(\"load\", 1)");
                    while (!vint$2$iter.atEnd()) {
                        org.jmlspecs.jmlunit.strategies.LongIterator
                            vlong$3$iter
                            = this.vlongIter("load", 0);
                        this.check_has_data
                            (vlong$3$iter,
                             "this.vlongIter(\"load\", 0)");
                        while (!vlong$3$iter.atEnd()) {
                            final ie.ucd.srg.Ballot receiver$
                                = (ie.ucd.srg.Ballot) receivers$iter.get();
                            final long[] candidateIDList
                                = (long[]) vlong$_$1$iter.get();
                            final int listSize
                                = vint$2$iter.getInt();
                            final long uniqueID
                                = vlong$3$iter.getLong();
                            methodTests$.addTest
                                (new TestLoad(receiver$, candidateIDList, listSize, uniqueID));
                            vlong$3$iter.advance();
                        }
                        vint$2$iter.advance();
                    }
                    vlong$_$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the load method. */
    protected static class TestLoad extends OneTest {
        /** The receiver */
        private ie.ucd.srg.Ballot receiver$;
        /** Argument candidateIDList */
        private long[] candidateIDList;
        /** Argument listSize */
        private int listSize;
        /** Argument uniqueID */
        private long uniqueID;

        /** Initialize this instance. */
        public TestLoad(ie.ucd.srg.Ballot receiver$, long[] candidateIDList, int listSize, long uniqueID) {
            super("load"+ ":" + (candidateIDList==null?"null":("{long["+candidateIDList.length + "]"+"}"))+ "," +listSize+ "," +uniqueID);
            this.receiver$ = receiver$;
            this.candidateIDList = candidateIDList;
            this.listSize = listSize;
            this.uniqueID = uniqueID;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.load(candidateIDList, listSize, uniqueID);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'load' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument candidateIDList: " + this.candidateIDList;
            msg += "\n\tArgument listSize: " + this.listSize;
            msg += "\n\tArgument uniqueID: " + this.uniqueID;
            return msg;
        }
    }

    /** Add tests for the getCandidateID method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetCandidateID
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getCandidateID");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vie_koa_BallotIter("getCandidateID", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vie_koa_BallotIter(\"getCandidateID\", 0))");
            while (!receivers$iter.atEnd()) {
                final ie.ucd.srg.Ballot receiver$
                    = (ie.ucd.srg.Ballot) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetCandidateID(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getCandidateID method. */
    protected static class TestGetCandidateID extends OneTest {
        /** The receiver */
        private ie.ucd.srg.Ballot receiver$;

        /** Initialize this instance. */
        public TestGetCandidateID(ie.ucd.srg.Ballot receiver$) {
            super("getCandidateID");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getCandidateID();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getCandidateID' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getNextPreference method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetNextPreference
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getNextPreference");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vie_koa_BallotIter("getNextPreference", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vie_koa_BallotIter(\"getNextPreference\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("getNextPreference", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"getNextPreference\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final ie.ucd.srg.Ballot receiver$
                        = (ie.ucd.srg.Ballot) receivers$iter.get();
                    final int offset
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestGetNextPreference(receiver$, offset));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getNextPreference method. */
    protected static class TestGetNextPreference extends OneTest {
        /** The receiver */
        private ie.ucd.srg.Ballot receiver$;
        /** Argument offset */
        private int offset;

        /** Initialize this instance. */
        public TestGetNextPreference(ie.ucd.srg.Ballot receiver$, int offset) {
            super("getNextPreference"+ ":" + offset);
            this.receiver$ = receiver$;
            this.offset = offset;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getNextPreference(offset);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getNextPreference' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument offset: " + this.offset;
            return msg;
        }
    }

    /** Add tests for the transfer method
     * to the overall test suite. */
    private void addTestSuiteFor$TestTransfer
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("transfer");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vie_koa_BallotIter("transfer", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vie_koa_BallotIter(\"transfer\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.LongIterator
                    vlong$1$iter
                    = this.vlongIter("transfer", 0);
                this.check_has_data
                    (vlong$1$iter,
                     "this.vlongIter(\"transfer\", 0)");
                while (!vlong$1$iter.atEnd()) {
                    final ie.ucd.srg.Ballot receiver$
                        = (ie.ucd.srg.Ballot) receivers$iter.get();
                    final long countNumber
                        = vlong$1$iter.getLong();
                    methodTests$.addTest
                        (new TestTransfer(receiver$, countNumber));
                    vlong$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the transfer method. */
    protected static class TestTransfer extends OneTest {
        /** The receiver */
        private ie.ucd.srg.Ballot receiver$;
        /** Argument countNumber */
        private long countNumber;

        /** Initialize this instance. */
        public TestTransfer(ie.ucd.srg.Ballot receiver$, long countNumber) {
            super("transfer"+ ":" + countNumber);
            this.receiver$ = receiver$;
            this.countNumber = countNumber;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.transfer(countNumber);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'transfer' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument countNumber: " + this.countNumber;
            return msg;
        }
    }

    /** Add tests for the getBallotID method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetBallotID
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getBallotID");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vie_koa_BallotIter("getBallotID", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vie_koa_BallotIter(\"getBallotID\", 0))");
            while (!receivers$iter.atEnd()) {
                final ie.ucd.srg.Ballot receiver$
                    = (ie.ucd.srg.Ballot) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetBallotID(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getBallotID method. */
    protected static class TestGetBallotID extends OneTest {
        /** The receiver */
        private ie.ucd.srg.Ballot receiver$;

        /** Initialize this instance. */
        public TestGetBallotID(ie.ucd.srg.Ballot receiver$) {
            super("getBallotID");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getBallotID();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getBallotID' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the isAssignedTo method
     * to the overall test suite. */
    private void addTestSuiteFor$TestIsAssignedTo
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("isAssignedTo");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vie_koa_BallotIter("isAssignedTo", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vie_koa_BallotIter(\"isAssignedTo\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.LongIterator
                    vlong$1$iter
                    = this.vlongIter("isAssignedTo", 0);
                this.check_has_data
                    (vlong$1$iter,
                     "this.vlongIter(\"isAssignedTo\", 0)");
                while (!vlong$1$iter.atEnd()) {
                    final ie.ucd.srg.Ballot receiver$
                        = (ie.ucd.srg.Ballot) receivers$iter.get();
                    final long candidateIDToCheck
                        = vlong$1$iter.getLong();
                    methodTests$.addTest
                        (new TestIsAssignedTo(receiver$, candidateIDToCheck));
                    vlong$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the isAssignedTo method. */
    protected static class TestIsAssignedTo extends OneTest {
        /** The receiver */
        private ie.ucd.srg.Ballot receiver$;
        /** Argument candidateIDToCheck */
        private long candidateIDToCheck;

        /** Initialize this instance. */
        public TestIsAssignedTo(ie.ucd.srg.Ballot receiver$, long candidateIDToCheck) {
            super("isAssignedTo"+ ":" + candidateIDToCheck);
            this.receiver$ = receiver$;
            this.candidateIDToCheck = candidateIDToCheck;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.isAssignedTo(candidateIDToCheck);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'isAssignedTo' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument candidateIDToCheck: " + this.candidateIDToCheck;
            return msg;
        }
    }

    /** Add tests for the remainingPreferences method
     * to the overall test suite. */
    private void addTestSuiteFor$TestRemainingPreferences
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("remainingPreferences");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vie_koa_BallotIter("remainingPreferences", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vie_koa_BallotIter(\"remainingPreferences\", 0))");
            while (!receivers$iter.atEnd()) {
                final ie.ucd.srg.Ballot receiver$
                    = (ie.ucd.srg.Ballot) receivers$iter.get();
                methodTests$.addTest
                    (new TestRemainingPreferences(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the remainingPreferences method. */
    protected static class TestRemainingPreferences extends OneTest {
        /** The receiver */
        private ie.ucd.srg.Ballot receiver$;

        /** Initialize this instance. */
        public TestRemainingPreferences(ie.ucd.srg.Ballot receiver$) {
            super("remainingPreferences");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.remainingPreferences();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'remainingPreferences' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the isAfter method
     * to the overall test suite. */
    private void addTestSuiteFor$TestIsAfter
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("isAfter");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vie_koa_BallotIter("isAfter", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vie_koa_BallotIter(\"isAfter\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vie_koa_Ballot$1$iter
                    = this.vie_koa_BallotIter("isAfter", 0);
                this.check_has_data
                    (vie_koa_Ballot$1$iter,
                     "this.vie_koa_BallotIter(\"isAfter\", 0)");
                while (!vie_koa_Ballot$1$iter.atEnd()) {
                    final ie.ucd.srg.Ballot receiver$
                        = (ie.ucd.srg.Ballot) receivers$iter.get();
                    final ie.ucd.srg.Ballot other
                        = (ie.ucd.srg.Ballot) vie_koa_Ballot$1$iter.get();
                    methodTests$.addTest
                        (new TestIsAfter(receiver$, other));
                    vie_koa_Ballot$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the isAfter method. */
    protected static class TestIsAfter extends OneTest {
        /** The receiver */
        private ie.ucd.srg.Ballot receiver$;
        /** Argument other */
        private ie.ucd.srg.Ballot other;

        /** Initialize this instance. */
        public TestIsAfter(ie.ucd.srg.Ballot receiver$, ie.ucd.srg.Ballot other) {
            super("isAfter"+ ":" + (other==null? "null" :"{election.tally.Ballot}"));
            this.receiver$ = receiver$;
            this.other = other;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.isAfter(other);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'isAfter' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument other: " + this.other;
            return msg;
        }
    }

    /** Check that the iterator is non-null and not empty. */
    private void
    check_has_data(org.jmlspecs.jmlunit.strategies.IndefiniteIterator iter,
                   String call)
    {
        if (iter == null) {
            junit.framework.Assert.fail(call + " returned null");
        }
        if (iter.atEnd()) {
            junit.framework.Assert.fail(call + " returned an empty iterator");
        }
    }

    /** Converts a char to a printable String for display */
    public static String charToString(char c) {
        if (c == '\n') {
            return "NL";
        } else if (c == '\r') {
            return "CR";
        } else if (c == '\t') {
            return "TAB";
        } else if (Character.isISOControl(c)) {
            int i = (int)c;
            return "\\u"
                    + Character.forDigit((i/2048)%16,16)
                    + Character.forDigit((i/256)%16,16)
                    + Character.forDigit((i/16)%16,16)
                    + Character.forDigit((i)%16,16);
        }
        return Character.toString(c);
    }
}
