/*******************************************************************************
 * Copyright (c) 2001, 2004 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
// This file was generated by jmlunit on Thu Apr 26 13:56:45 IST 2007.

package election.tally;

/** Automatically-generated test driver for JML and JUnit based
 * testing of Candidate. The superclass of this class should be edited
 * to supply test data. However it's best not to edit this class
 * directly; instead use the command
 * <pre>
 *  jmlunit Candidate.java
 * </pre>
 * to regenerate this class whenever Candidate.java changes.
 */
public class Candidate_JML_Test
     extends Candidate_JML_TestData
{
    /** Initialize this class. */
    public Candidate_JML_Test(java.lang.String name) {
        super(name);
    }

    /** Run the tests. */
    public static void main(java.lang.String[] args) {
        org.jmlspecs.jmlunit.JMLTestRunner.run(suite());
        // You can also use a JUnit test runner such as:
        // junit.textui.TestRunner.run(suite());
    }

    /** Test to see if the code for class Candidate
     * has been compiled with runtime assertion checking (i.e., by jmlc).
     * Code that is not compiled with jmlc would not make an effective test,
     * since no assertion checking would be done. */
    public void test$IsRACCompiled() {
        junit.framework.Assert.assertTrue("code for class Candidate"
                + " was not compiled with jmlc"
                + " so no assertions will be checked!",
            org.jmlspecs.jmlrac.runtime.JMLChecker.isRACCompiled(Candidate.class)
            );
    }

    /** Return the test suite for this test class.  This will have
    * added to it at least test$IsRACCompiled(), and any test methods
    * written explicitly by the user in the superclass.  It will also
    * have added test suites for each testing each method and
    * constructor.
    */
    //@ ensures \result != null;
    public static junit.framework.Test suite() {
        Candidate_JML_Test testobj
            = new Candidate_JML_Test("Candidate_JML_Test");
        junit.framework.TestSuite testsuite = testobj.overallTestSuite();
        // Add instances of Test found by the reflection mechanism.
        testsuite.addTestSuite(Candidate_JML_Test.class);
        testobj.addTestSuiteForEachMethod(testsuite);
        return testsuite;
    }

    /** A JUnit test object that can run a single test method.  This
     * is defined as a nested class solely for convenience; it can't
     * be defined once and for all because it must subclass its
     * enclosing class.
     */
    protected static abstract class OneTest extends Candidate_JML_Test {

        /** Initialize this test object. */
        public OneTest(String name) {
            super(name);
        }

        /** The result object that holds information about testing. */
        protected junit.framework.TestResult result;

        //@ also
        //@ requires result != null;
        public void run(junit.framework.TestResult result) {
            this.result = result;
            super.run(result);
        }

        /* Run a single test and decide whether the test was
         * successful, meaningless, or a failure.  This is the
         * Template Method pattern abstraction of the inner loop in a
         * JML/JUnit test. */
        public void runTest() throws java.lang.Throwable {
            try {
                // The call being tested!
                doCall();
            }
            catch (org.jmlspecs.jmlrac.runtime.JMLEntryPreconditionError e) {
                // meaningless test input
                addMeaningless();
            } catch (org.jmlspecs.jmlrac.runtime.JMLAssertionError e) {
                // test failure
                int l = org.jmlspecs.jmlrac.runtime.JMLChecker.getLevel();
                org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel
                    (org.jmlspecs.jmlrac.runtime.JMLOption.NONE);
                try {
                    java.lang.String failmsg = this.failMessage(e);
                    junit.framework.AssertionFailedError err
                        = new junit.framework.AssertionFailedError(failmsg);
                    err.setStackTrace(new java.lang.StackTraceElement[]{});
                    err.initCause(e);
                    result.addFailure(this, err);
                } finally {
                    org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel(l);
                }
            } catch (java.lang.Throwable e) {
                // test success
            }
        }

        /** Call the method to be tested with the appropriate arguments. */
        protected abstract void doCall() throws java.lang.Throwable;

        /** Format the error message for a test failure, based on the
         * method's arguments. */
        protected abstract java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e);

        /** Inform listeners that a meaningless test was run. */
        private void addMeaningless() {
            if (result instanceof org.jmlspecs.jmlunit.JMLTestResult) {
                ((org.jmlspecs.jmlunit.JMLTestResult)result)
                    .addMeaningless(this);
            }
        }
    }

    /** Create the tests that are to be run for testing the class
     * Candidate.  The framework will then run them.
     * @param overallTestSuite$ The suite accumulating all of the tests
     * for this driver class.
     */
    //@ requires overallTestSuite$ != null;
    public void addTestSuiteForEachMethod
        (junit.framework.TestSuite overallTestSuite$)
    {
        try {
            this.addTestSuiteFor$TestGetVoteAtCount(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetTotalVote(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetOriginalVote(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetState(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetCandidateID(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestCandidate(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestAddVote(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestRemoveVote(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestSetCandidateID(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestDeclareElected(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestDeclareEliminated(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetNumberOfVotesInLastSet(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetLastSetAddedCountNumber(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestIsAfter(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
    }

    /** Add tests for the getVoteAtCount method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetVoteAtCount
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getVoteAtCount");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vie_koa_CandidateIter("getVoteAtCount", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vie_koa_CandidateIter(\"getVoteAtCount\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("getVoteAtCount", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"getVoteAtCount\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final election.tally.Candidate receiver$
                        = (election.tally.Candidate) receivers$iter.get();
                    final int count
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestGetVoteAtCount(receiver$, count));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getVoteAtCount method. */
    protected static class TestGetVoteAtCount extends OneTest {
        /** The receiver */
        private election.tally.Candidate receiver$;
        /** Argument count */
        private int count;

        /** Initialize this instance. */
        public TestGetVoteAtCount(election.tally.Candidate receiver$, int count) {
            super("getVoteAtCount"+ ":" + count);
            this.receiver$ = receiver$;
            this.count = count;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getVoteAtCount(count);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getVoteAtCount' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument count: " + this.count;
            return msg;
        }
    }

    /** Add tests for the getTotalVote method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetTotalVote
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getTotalVote");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vie_koa_CandidateIter("getTotalVote", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vie_koa_CandidateIter(\"getTotalVote\", 0))");
            while (!receivers$iter.atEnd()) {
                final election.tally.Candidate receiver$
                    = (election.tally.Candidate) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetTotalVote(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getTotalVote method. */
    protected static class TestGetTotalVote extends OneTest {
        /** The receiver */
        private election.tally.Candidate receiver$;

        /** Initialize this instance. */
        public TestGetTotalVote(election.tally.Candidate receiver$) {
            super("getTotalVote");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getTotalVote();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getTotalVote' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getOriginalVote method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetOriginalVote
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getOriginalVote");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vie_koa_CandidateIter("getOriginalVote", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vie_koa_CandidateIter(\"getOriginalVote\", 0))");
            while (!receivers$iter.atEnd()) {
                final election.tally.Candidate receiver$
                    = (election.tally.Candidate) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetOriginalVote(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getOriginalVote method. */
    protected static class TestGetOriginalVote extends OneTest {
        /** The receiver */
        private election.tally.Candidate receiver$;

        /** Initialize this instance. */
        public TestGetOriginalVote(election.tally.Candidate receiver$) {
            super("getOriginalVote");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getOriginalVote();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getOriginalVote' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getState method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetState
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getState");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vie_koa_CandidateIter("getState", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vie_koa_CandidateIter(\"getState\", 0))");
            while (!receivers$iter.atEnd()) {
                final election.tally.Candidate receiver$
                    = (election.tally.Candidate) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetState(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getState method. */
    protected static class TestGetState extends OneTest {
        /** The receiver */
        private election.tally.Candidate receiver$;

        /** Initialize this instance. */
        public TestGetState(election.tally.Candidate receiver$) {
            super("getState");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getState();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getState' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getCandidateID method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetCandidateID
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getCandidateID");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vie_koa_CandidateIter("getCandidateID", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vie_koa_CandidateIter(\"getCandidateID\", 0))");
            while (!receivers$iter.atEnd()) {
                final election.tally.Candidate receiver$
                    = (election.tally.Candidate) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetCandidateID(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getCandidateID method. */
    protected static class TestGetCandidateID extends OneTest {
        /** The receiver */
        private election.tally.Candidate receiver$;

        /** Initialize this instance. */
        public TestGetCandidateID(election.tally.Candidate receiver$) {
            super("getCandidateID");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getCandidateID();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getCandidateID' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the Candidate contructor
     * to the overall test suite. */
    private void addTestSuiteFor$TestCandidate
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("Candidate");
        try {
            methodTests$.addTest
                (new TestCandidate());
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the Candidate contructor. */
    protected static class TestCandidate extends OneTest {

        /** Initialize this instance. */
        public TestCandidate() {
            super("Candidate");
        }

        protected void doCall() throws java.lang.Throwable {
            new Candidate();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tContructor 'Candidate'";
            return msg;
        }
    }

    /** Add tests for the addVote method
     * to the overall test suite. */
    private void addTestSuiteFor$TestAddVote
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("addVote");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vie_koa_CandidateIter("addVote", 2));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vie_koa_CandidateIter(\"addVote\", 2))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("addVote", 1);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"addVote\", 1)");
                while (!vint$1$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.IntIterator
                        vint$2$iter
                        = this.vintIter("addVote", 0);
                    this.check_has_data
                        (vint$2$iter,
                         "this.vintIter(\"addVote\", 0)");
                    while (!vint$2$iter.atEnd()) {
                        final election.tally.Candidate receiver$
                            = (election.tally.Candidate) receivers$iter.get();
                        final int numberOfVotes
                            = vint$1$iter.getInt();
                        final int count
                            = vint$2$iter.getInt();
                        methodTests$.addTest
                            (new TestAddVote(receiver$, numberOfVotes, count));
                        vint$2$iter.advance();
                    }
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the addVote method. */
    protected static class TestAddVote extends OneTest {
        /** The receiver */
        private election.tally.Candidate receiver$;
        /** Argument numberOfVotes */
        private int numberOfVotes;
        /** Argument count */
        private int count;

        /** Initialize this instance. */
        public TestAddVote(election.tally.Candidate receiver$, int numberOfVotes, int count) {
            super("addVote"+ ":" + numberOfVotes+ "," +count);
            this.receiver$ = receiver$;
            this.numberOfVotes = numberOfVotes;
            this.count = count;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.addVote(numberOfVotes, count);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'addVote' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument numberOfVotes: " + this.numberOfVotes;
            msg += "\n\tArgument count: " + this.count;
            return msg;
        }
    }

    /** Add tests for the removeVote method
     * to the overall test suite. */
    private void addTestSuiteFor$TestRemoveVote
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("removeVote");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vie_koa_CandidateIter("removeVote", 2));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vie_koa_CandidateIter(\"removeVote\", 2))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("removeVote", 1);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"removeVote\", 1)");
                while (!vint$1$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.IntIterator
                        vint$2$iter
                        = this.vintIter("removeVote", 0);
                    this.check_has_data
                        (vint$2$iter,
                         "this.vintIter(\"removeVote\", 0)");
                    while (!vint$2$iter.atEnd()) {
                        final election.tally.Candidate receiver$
                            = (election.tally.Candidate) receivers$iter.get();
                        final int numberOfVotes
                            = vint$1$iter.getInt();
                        final int count
                            = vint$2$iter.getInt();
                        methodTests$.addTest
                            (new TestRemoveVote(receiver$, numberOfVotes, count));
                        vint$2$iter.advance();
                    }
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the removeVote method. */
    protected static class TestRemoveVote extends OneTest {
        /** The receiver */
        private election.tally.Candidate receiver$;
        /** Argument numberOfVotes */
        private int numberOfVotes;
        /** Argument count */
        private int count;

        /** Initialize this instance. */
        public TestRemoveVote(election.tally.Candidate receiver$, int numberOfVotes, int count) {
            super("removeVote"+ ":" + numberOfVotes+ "," +count);
            this.receiver$ = receiver$;
            this.numberOfVotes = numberOfVotes;
            this.count = count;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.removeVote(numberOfVotes, count);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'removeVote' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument numberOfVotes: " + this.numberOfVotes;
            msg += "\n\tArgument count: " + this.count;
            return msg;
        }
    }

    /** Add tests for the setCandidateID method
     * to the overall test suite. */
    private void addTestSuiteFor$TestSetCandidateID
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("setCandidateID");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vie_koa_CandidateIter("setCandidateID", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vie_koa_CandidateIter(\"setCandidateID\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.LongIterator
                    vlong$1$iter
                    = this.vlongIter("setCandidateID", 0);
                this.check_has_data
                    (vlong$1$iter,
                     "this.vlongIter(\"setCandidateID\", 0)");
                while (!vlong$1$iter.atEnd()) {
                    final election.tally.Candidate receiver$
                        = (election.tally.Candidate) receivers$iter.get();
                    final long candidateIDToAssign
                        = vlong$1$iter.getLong();
                    methodTests$.addTest
                        (new TestSetCandidateID(receiver$, candidateIDToAssign));
                    vlong$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the setCandidateID method. */
    protected static class TestSetCandidateID extends OneTest {
        /** The receiver */
        private election.tally.Candidate receiver$;
        /** Argument candidateIDToAssign */
        private long candidateIDToAssign;

        /** Initialize this instance. */
        public TestSetCandidateID(election.tally.Candidate receiver$, long candidateIDToAssign) {
            super("setCandidateID"+ ":" + candidateIDToAssign);
            this.receiver$ = receiver$;
            this.candidateIDToAssign = candidateIDToAssign;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.setCandidateID(candidateIDToAssign);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'setCandidateID' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument candidateIDToAssign: " + this.candidateIDToAssign;
            return msg;
        }
    }

    /** Add tests for the declareElected method
     * to the overall test suite. */
    private void addTestSuiteFor$TestDeclareElected
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("declareElected");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vie_koa_CandidateIter("declareElected", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vie_koa_CandidateIter(\"declareElected\", 0))");
            while (!receivers$iter.atEnd()) {
                final election.tally.Candidate receiver$
                    = (election.tally.Candidate) receivers$iter.get();
                methodTests$.addTest
                    (new TestDeclareElected(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the declareElected method. */
    protected static class TestDeclareElected extends OneTest {
        /** The receiver */
        private election.tally.Candidate receiver$;

        /** Initialize this instance. */
        public TestDeclareElected(election.tally.Candidate receiver$) {
            super("declareElected");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.declareElected();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'declareElected' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the declareEliminated method
     * to the overall test suite. */
    private void addTestSuiteFor$TestDeclareEliminated
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("declareEliminated");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vie_koa_CandidateIter("declareEliminated", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vie_koa_CandidateIter(\"declareEliminated\", 0))");
            while (!receivers$iter.atEnd()) {
                final election.tally.Candidate receiver$
                    = (election.tally.Candidate) receivers$iter.get();
                methodTests$.addTest
                    (new TestDeclareEliminated(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the declareEliminated method. */
    protected static class TestDeclareEliminated extends OneTest {
        /** The receiver */
        private election.tally.Candidate receiver$;

        /** Initialize this instance. */
        public TestDeclareEliminated(election.tally.Candidate receiver$) {
            super("declareEliminated");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.declareEliminated();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'declareEliminated' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getNumberOfVotesInLastSet method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetNumberOfVotesInLastSet
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getNumberOfVotesInLastSet");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vie_koa_CandidateIter("getNumberOfVotesInLastSet", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vie_koa_CandidateIter(\"getNumberOfVotesInLastSet\", 0))");
            while (!receivers$iter.atEnd()) {
                final election.tally.Candidate receiver$
                    = (election.tally.Candidate) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetNumberOfVotesInLastSet(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getNumberOfVotesInLastSet method. */
    protected static class TestGetNumberOfVotesInLastSet extends OneTest {
        /** The receiver */
        private election.tally.Candidate receiver$;

        /** Initialize this instance. */
        public TestGetNumberOfVotesInLastSet(election.tally.Candidate receiver$) {
            super("getNumberOfVotesInLastSet");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getNumberOfVotesInLastSet();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getNumberOfVotesInLastSet' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getLastSetAddedCountNumber method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetLastSetAddedCountNumber
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getLastSetAddedCountNumber");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vie_koa_CandidateIter("getLastSetAddedCountNumber", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vie_koa_CandidateIter(\"getLastSetAddedCountNumber\", 0))");
            while (!receivers$iter.atEnd()) {
                final election.tally.Candidate receiver$
                    = (election.tally.Candidate) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetLastSetAddedCountNumber(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getLastSetAddedCountNumber method. */
    protected static class TestGetLastSetAddedCountNumber extends OneTest {
        /** The receiver */
        private election.tally.Candidate receiver$;

        /** Initialize this instance. */
        public TestGetLastSetAddedCountNumber(election.tally.Candidate receiver$) {
            super("getLastSetAddedCountNumber");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getLastSetAddedCountNumber();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getLastSetAddedCountNumber' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the isAfter method
     * to the overall test suite. */
    private void addTestSuiteFor$TestIsAfter
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("isAfter");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.vie_koa_CandidateIter("isAfter", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.vie_koa_CandidateIter(\"isAfter\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    vie_koa_Candidate$1$iter
                    = this.vie_koa_CandidateIter("isAfter", 0);
                this.check_has_data
                    (vie_koa_Candidate$1$iter,
                     "this.vie_koa_CandidateIter(\"isAfter\", 0)");
                while (!vie_koa_Candidate$1$iter.atEnd()) {
                    final election.tally.Candidate receiver$
                        = (election.tally.Candidate) receivers$iter.get();
                    final election.tally.Candidate other
                        = (election.tally.Candidate) vie_koa_Candidate$1$iter.get();
                    methodTests$.addTest
                        (new TestIsAfter(receiver$, other));
                    vie_koa_Candidate$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the isAfter method. */
    protected static class TestIsAfter extends OneTest {
        /** The receiver */
        private election.tally.Candidate receiver$;
        /** Argument other */
        private election.tally.Candidate other;

        /** Initialize this instance. */
        public TestIsAfter(election.tally.Candidate receiver$, election.tally.Candidate other) {
            super("isAfter"+ ":" + (other==null? "null" :"{election.tally.Candidate}"));
            this.receiver$ = receiver$;
            this.other = other;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.isAfter(other);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'isAfter' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument other: " + this.other;
            return msg;
        }
    }

    /** Check that the iterator is non-null and not empty. */
    private void
    check_has_data(org.jmlspecs.jmlunit.strategies.IndefiniteIterator iter,
                   String call)
    {
        if (iter == null) {
            junit.framework.Assert.fail(call + " returned null");
        }
        if (iter.atEnd()) {
            junit.framework.Assert.fail(call + " returned an empty iterator");
        }
    }

    /** Converts a char to a printable String for display */
    public static String charToString(char c) {
        if (c == '\n') {
            return "NL";
        } else if (c == '\r') {
            return "CR";
        } else if (c == '\t') {
            return "TAB";
        } else if (Character.isISOControl(c)) {
            int i = (int)c;
            return "\\u"
                    + Character.forDigit((i/2048)%16,16)
                    + Character.forDigit((i/256)%16,16)
                    + Character.forDigit((i/16)%16,16)
                    + Character.forDigit((i)%16,16);
        }
        return Character.toString(c);
    }
}
